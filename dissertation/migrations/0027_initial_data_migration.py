# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-10-11 10:25
from __future__ import unicode_literals
from base.models.serializable_model import format_data_for_migration, LOGGER
import logging

from dissertation.models.adviser import Adviser
from dissertation.models.dissertation import Dissertation
from dissertation.models.dissertation_document_file import DissertationDocumentFile
from dissertation.models.dissertation_group import DissertationGroup
from dissertation.models.dissertation_location import DissertationLocation
from dissertation.models.dissertation_role import DissertationRole
from dissertation.models.dissertation_update import DissertationUpdate
from dissertation.models.offer_proposition import OfferProposition
from dissertation.models.proposition_dissertation import PropositionDissertation
from dissertation.models.proposition_document_file import PropositionDocumentFile
from dissertation.models.proposition_offer import PropositionOffer
from dissertation.models.proposition_role import PropositionRole
from django.conf import settings
from osis_common.models.document_file import DocumentFile
from pika.exceptions import ChannelClosed, ConnectionClosed
from backoffice.queue import queue_sender
from django.db import migrations

QUEUE_NAME = "osis_portal"
LOGGER = logging.getLogger(settings.DEFAULT_LOGGER)


def create_initial_data_dissertation(apps, schema_editor):
    advisers = list(Adviser.objects.all())
    dissertations = list(Dissertation.objects.all())
    dissertation_document_files = list(DissertationDocumentFile.objects.all())
    dissertation_groups = list(DissertationGroup.objects.all())
    dissertation_roles = list(DissertationRole.objects.all())
    dissertation_updates = list(DissertationUpdate.objects.all())
    dissertation_locations = list(DissertationLocation.objects.all())
    offer_propositions = list(OfferProposition.objects.all())
    propositions = list(PropositionDissertation.objects.all())
    proposition_offers = list(PropositionOffer.objects.all())
    proposition_roles = list(PropositionRole.objects.all())
    proposition_document_files = list(PropositionDocumentFile.objects.all())
    document_files = list(DocumentFile.objects.all())
    try:
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(advisers))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(offer_propositions))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(propositions))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(proposition_offers))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(proposition_roles))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(document_files))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(proposition_document_files))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertations))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertation_groups))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertation_roles))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertation_updates))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertation_locations))
        queue_sender.send_message(QUEUE_NAME, format_data_for_migration(dissertation_document_files))
    except (ChannelClosed, ConnectionClosed):
        LOGGER.warning('QueueServer is not installed or not launched')


class Migration(migrations.Migration):

    dependencies = [
        ('dissertation', '0027_initial_data migration'),
    ]

    operations = [
        migrations.RunPython(create_initial_data_dissertation)
    ]
