# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-11-24 14:01
from __future__ import unicode_literals

from django.db import migrations, connection


origin_year = 2017


def _program_managers_by_acronym(acronym):
    return _last_program_manager_years(acronym)


def _last_program_manager_years(acronym):
    with connection.cursor() as cursor:
        sql = " SELECT base_programmanager.id as id FROM base_programmanager, base_offeryear, base_academicyear where base_offeryear.id = base_programmanager.offer_year_id and base_offeryear.academic_year_id = base_academicyear.id and base_academicyear.year = %s and base_offeryear.acronym=%s "
        cursor.execute(sql, [origin_year, acronym])
        return dictfetchall(cursor)
    return None


def update_program_managers_with_education_group(apps, schema_editor):

    acronyms = _find_acronyms()

    for aacronym in acronyms:
        acronym=aacronym['acronym']
        education_group_id = _fin_education_group(acronym)
        prog_mgrs = _program_managers_by_acronym(acronym)
        for p in prog_mgrs:
            _update_manager(p, education_group_id)

def _fin_education_group(acronym):
    with connection.cursor() as cursor:
        sql = " select max(base_educationgroupyear.education_group_id) as id from base_educationgroupyear where base_educationgroupyear.acronym= %s "
        cursor.execute(sql, [acronym])
        return  cursor.fetchone()

    return None

def _find_acronyms():
    with connection.cursor() as cursor:
        sql = " SELECT distinct(base_offeryear.acronym) as acronym FROM base_programmanager, base_offeryear, base_academicyear where base_offeryear.id = base_programmanager.offer_year_id and base_offeryear.academic_year_id = base_academicyear.id and base_academicyear.year = %s "
        cursor.execute(sql, [origin_year])
        return dictfetchall(cursor)

    return None


def _update_manager(manager, education_group_id):
    with connection.cursor() as cursor:
        sql = "UPDATE base_programmanager set education_group_id= %s where id= %s"
        cursor.execute(sql, [education_group_id, manager['id'] ])


def dictfetchall(cursor):
    """Returns all rows from a cursor as a dict"""
    desc = cursor.description
    return [
        dict(zip([col[0] for col in desc], row))
        for row in cursor.fetchall()
        ]


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0182_programmanager_education_group'),
    ]

    operations = [
        migrations.RunPython(update_program_managers_with_education_group),
    ]
